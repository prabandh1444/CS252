#!/usr/bin/python3

import os

import pandas as pd
import matplotlib.pyplot as plt


def summary():
    df = pd.read_csv('/tmp/csma-ca-nsta-udp.txt', sep='\t')
    df = df.drop(df.columns[[0, -1]], axis=1)
    aggregates = df.agg([min, max, sum], axis=1)
    time = pd.DataFrame({'Time': map(float, range(1, 1 + len(df)))})

    return pd.concat([time, aggregates], axis=1).round(decimals=4)

def run():
    # run the simulation for 5 network instances with 1, 5, 10, 20, 30 client nodes respectively
    client_nodes = [1, 5, 10, 20, 30]
    average_throughput = []
    average_min_max_ratio = []
    for i in range(len(client_nodes)):
        # command ./ns3 run "nsta-udp --uplinks=<number of client nodes>"
        os.system('./ns3 run "nsta-udp --uplinks={}"'.format(client_nodes[i]))
        # collect the results from the simulation
        print('\n-----------summary for {} client nodes-----------'.format(client_nodes[i]))
        df = summary()
        print(df.to_string(index=False))
        print('--------------------------------------------\n')
        # calculate the average throughput
        average_throughput.append(df['sum'].mean())
        # calculate the average min/max ratio
        average_min_max_ratio.append((df['min'] / df['max']).mean())
    # print the results
    print('Average throughput: {}'.format(average_throughput))
    print('Average min/max ratio: {}'.format(average_min_max_ratio))
    # plot the results
    plt.plot(client_nodes, average_throughput, '-o', label='Average throughput')
    plt.xlabel('Number of nodes')
    plt.ylabel('Average throughput (Mbps)')
    plt.title('Average throughput vs number of nodes (190050096)')
    plt.legend()
    plt.savefig('average_throughput.png')
    plt.clf()
    plt.plot(client_nodes, average_min_max_ratio, '-o', label='Average min/max ratio')
    plt.xlabel('Number of nodes')
    plt.ylabel('Average min/max ratio')
    plt.title('Average min/max ratio vs number of nodes (190050096)')
    plt.legend()
    plt.savefig('average_min_max_ratio.png')

    # delte all .pcap and .txt files generated by the simulation
    os.system('rm -f *.pcap /tmp/csma-ca-nsta-udp.txt')


if __name__ == '__main__':
    os.chdir(os.path.abspath(os.path.dirname(__file__)))

    run()
